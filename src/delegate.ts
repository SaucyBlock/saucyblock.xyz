const _abi = require('./abi.json');
const { 
  createPublicClient, parseSignature, BaseError, ContractFunctionRevertedError, 
  http, Address, Hex, parseAbi, createWalletClient, hexToSignature 
} = require('viem');
const { mainnet } = require('viem/chains');
import { WalletClient, formatEther, maxUint256 } from 'viem'
import delegateHelperABI from './delegateHelperABI.json';
const delegateHelper = "0x94363B11b37BC3ffe43AB09cff5A010352FE85dC";


export enum DelegateToken {
    AAVE = "0x7Fc66500c84A76Ad7e9c93437bFc5Ac33E2DDaE9",
    AAAVE = "0xA700b4eB416Be35b2911fd5Dee80678ff64fF6C9",
    stkAAVE = "0x4da27a545c0c5B758a6BA100e3a049001de870f5"
}
const delegatee = "0x08651EeE3b78254653062BA89035b8F8AdF924CE";
const publicClient = createPublicClient({
  chain: mainnet,
  transport: http("https://eth-mainnet.g.alchemy.com/v2/AHvTHUHmlCKWoa5hezH-MTrKWw_MjtUZ")
});


async function generateSignature(token: DelegateToken, walletClient: any) {
  try {
      const [account] = await walletClient.getAddresses();
      console.log("account", account);

      const abi = _abi[token];
      
      // ÁèæÂú®„ÅÆ„Éñ„É≠„ÉÉ„ÇØÁï™Âè∑„ÇíÂèñÂæó
      const currentBlock = await publicClient.getBlockNumber();
      console.log("currentBlock", currentBlock);
      
      let nonce;

      // delegator„ÅÆÁèæÂú®„ÅÆnonce„ÇíÂèñÂæóÔºà„Åì„Åì„Åß„ÅØÁèæÂú®„ÅÆnonce„Çí‰ΩøÁî®Ôºâ
      try {
        nonce = await publicClient.readContract({
          address: token,
          abi: abi,
          functionName: DelegateToken.AAAVE == token ? "nonces" : "_nonces",
          args: [account],
        });
      } catch (err) {
          nonce = 0;
      }

      console.log("- nonce", nonce);

      // deadline„ÇíË®≠ÂÆö„Åó„Å™„ÅÑÊôÇ„ÅØ„ÄÅmaxUint256„Çí‰ΩøÁî®„Åô„Çã
      const deadline = maxUint256;

      // EIP-712„Éâ„É°„Ç§„É≥„Çª„Éë„É¨„Éº„Çø„Éº„ÇíÂèñÂæó
      const domainData = await publicClient.readContract({
        address: token,
        abi: abi,
        functionName: "eip712Domain",
        args: [],
      });

      console.log("domainData", domainData);

      // „Éâ„É°„Ç§„É≥ÊÉÖÂ†±„ÇíÊßãÁØâ
      const domain = {
        name: domainData[1], // „Éâ„É°„Ç§„É≥Âêç
        version: domainData[2], // „Éê„Éº„Ç∏„Éß„É≥
        chainId: Number(domainData[3]), // „ÉÅ„Çß„Éº„É≥ID
        verifyingContract: domainData[4], // Ê§úË®º„Ç≥„É≥„Éà„É©„ÇØ„Éà„Ç¢„Éâ„É¨„Çπ
      };

      console.log("--- domain", domain);

      // EIP-712„ÅÆÂûãÂÆöÁæ©„ÇíË®≠ÂÆö
      const types = {
        Delegate: [
          { name: 'delegator', type: 'address' },
          { name: 'delegatee', type: 'address' },
          { name: 'nonce', type: 'uint256' },
          { name: 'deadline', type: 'uint256' },
        ],
        DelegateByType: [
          { name: 'delegator', type: 'address' },
          { name: 'delegatee', type: 'address' },
          { name: 'nonce', type: 'uint256' },
          { name: 'deadline', type: 'uint256' },
          { name: 'delegationType', type: 'uint8' },
        ],
      };

      console.log("--- nonce", Number(nonce));

      // „É°„ÉÉ„Çª„Éº„Ç∏„Éá„Éº„Çø„ÇíÊßãÁØâÔºànonce„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®Ôºâ
      const message = {
        delegator: account,
        delegatee: delegatee,
        nonce: BigInt(Number(nonce)), // nonce„Çí„Åù„ÅÆ„Åæ„Åæ‰ΩøÁî®
        deadline: deadline, // BigInt„ÅÆ„Åæ„Åæ‰ΩøÁî®
        delegationType: 1,
      };

      console.log("walletClient", await walletClient.getAddresses());

      // EIP-712ÁΩ≤Âêç„ÇíÁîüÊàê
      const signature = await walletClient.signTypedData({
        account,
        domain,
        types,
        primaryType: "Delegate",
        message,
      });

      console.log("signature", signature);

      // ÁΩ≤Âêç„ÇíÂàÜËß£Ôºàv, r, sÔºâ„Åô„Çã
      const { v, r, s } = parseSignature(signature);
      console.log("v", v);
      console.log("r", r);
      console.log("s", s);

      return { v, r, s, account };
  } catch (error: any) {
      if (error.code === 4001) {
          console.error("„É¶„Éº„Ç∂„Éº„ÅåÁΩ≤Âêç„É™„ÇØ„Ç®„Çπ„Éà„ÇíÊãíÂê¶„Åó„Åæ„Åó„Åü„ÄÇ");
      } else {
          console.error("ÁΩ≤ÂêçÁîüÊàê‰∏≠„Å´‰∫àÊúü„Åó„Å™„ÅÑ„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:", error);
      }
      throw error;
  }
}


export async function metaDelegateALL(walletClient: any, isUseGasLess: boolean = true) {
  const tokens = [DelegateToken.AAAVE, DelegateToken.AAVE, DelegateToken.stkAAVE];
  return metaDelegate(tokens, walletClient, isUseGasLess);
}

export async function metaDelegate(tokens: DelegateToken[], walletClient: any, isUseGasLess: boolean = true) {
try {
  // generate delegateParams
  const [account] = await walletClient.getAddresses();
  console.log('/metaDelegate',account,isUseGasLess)
  const delegateParams = [];

  for (const token of tokens) {
    try {
        const { v, r, s, account } = await generateSignature(token, walletClient);

        console.log("account", account);

        delegateParams.push({
          underlyingAsset: token,
          delegationType: 2,
          delegator: account,
          delegatee: delegatee,
          deadline: maxUint256,
          v: Number(v),
          r: r,
          s: s,
        });

    } catch (err: any) {
        if (err instanceof BaseError) {
          console.error("BaseError:", err);
          const revertError = (err as any).walk((e: any) => e instanceof ContractFunctionRevertedError);
          if (revertError instanceof ContractFunctionRevertedError) {
            console.error("Revert Error Name:", revertError.data?.errorName || '');
            console.error("Revert Error Details:", revertError);
          }
        } else {
          console.error("Unexpected Error:", err);
        }
        // „É¶„Éº„Ç∂„Éº„Åå„Ç≠„É£„É≥„Çª„É´„Åó„ÅüÂ†¥Âêà„ÅØ„ÄÅÂá¶ÁêÜ„Çí‰∏≠Êñ≠„Åæ„Åü„ÅØ„Çπ„Ç≠„ÉÉ„Éó
        if (err.code === 4001) {
            console.log("„É¶„Éº„Ç∂„Éº„Å´„Çà„Å£„Å¶ÁΩ≤Âêç„Åå„Ç≠„É£„É≥„Çª„É´„Åï„Çå„Åæ„Åó„Åü„ÄÇ");
            return;
        }
    }
  }

  if (delegateParams.length === 0) {
      console.log("Âßî‰ªª„Éë„É©„É°„Éº„Çø„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇÂá¶ÁêÜ„Çí‰∏≠Êñ≠„Åó„Åæ„Åô„ÄÇ");
      return;
  }

  console.log("execute üî•üî•üî•", delegateParams);

  let result;
  console.log('üî•:isUseGasLess', isUseGasLess)
  if (isUseGasLess) {
      const response = await fetch("/api/executeDelegate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify(delegateParams, (key, value) =>
          typeof value === 'bigint' ? value.toString() : value
        ),
      });

      console.log("response", response);
      if (!response.ok) {
        throw new Error("HTTP Error: " + response.statusText);
      }
      let { txHash } = await response.json() as { txHash: string };
      console.log("txHash", txHash);
      result = txHash;
    }else {
      const txHash = await executeDelegate(walletClient, delegateParams);
      result = txHash;
    }

    console.log("Transaction Hash:", result);
    return result;
} catch (error) {
  console.error("metaDelegate Èñ¢Êï∞ÂÜÖ„Åß„Ç®„É©„Éº„ÅåÁô∫Áîü„Åó„Åæ„Åó„Åü:", error);
}
}


export async function getBalance(token: DelegateToken, address: any) {
  try {
    const abi = _abi[token]
    const balance = await publicClient.readContract({
      address: token,
      abi: abi,
      functionName: "balanceOf",
      args: [address],
    });
    console.log("balance", balance);
    console.log("token", token);
    return balance;
  } catch (err) {
    console.log(token, address)
    console.error("Unexpected Error at getBalance:");
    return 0;
  }

}

export async function getDelegatee(token: DelegateToken, address: any) {
  try {
    const abi = _abi[token]
    const [vote, proposal] = await publicClient.readContract({
    address: token,
    abi: abi,
    functionName: "getDelegates",
    args: [address],
  });
    console.log("vote", vote);
    console.log("proposal", proposal);
    return { vote: await publicClient.getEnsName({ address: vote }), proposal: await publicClient.getEnsName({ address: proposal }) };
  } catch (err) {
    console.error("Unexpected Error at getDelegatee:");
    return { vote: 0, proposal: 0 };
  }
}


async function executeDelegate(walletClient:WalletClient, params: any ) {

    const [account] = await walletClient.getAddresses();
    const { request, result } = await publicClient.simulateContract({
      address: delegateHelper,
      abi: delegateHelperABI,
      functionName: 'batchMetaDelegate',
      account: account,
      args:[params]
    });

    console.log("Gas Less tx execution detect", request);

    const hash = await walletClient.writeContract(request);
    return hash;
}

export async function getTotalDelegated(token: DelegateToken) {
  const abi = _abi[token]
  const totalDelegated = await publicClient.readContract({
    address: token,
    abi: abi,
    functionName: "getPowersCurrent",
    args: [delegatee],
  });
  return formatEther(BigInt(totalDelegated[0]));
}
